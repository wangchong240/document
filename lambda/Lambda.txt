1.什么Lambda表达式？
2.Strean 常见操作API操作
	1. 聚合操作
	2. Stream的处理流
		数据源
		数据转换
		获取结果
3. 获取Stream对象
	1. 从集合或者数组中获取[**]
		Collection.stream(),例如：accounts.stream();
		Collection.parallelStream()
		Arrays.Stream(T t);
	2. BufferReader
		BufferReader.lines() -> stream();
	3. 静态工厂
		java.util.stream.IntStream.rang().....
		java.nio.file.Files.walk()....
	4. 自定义构建
		java.util.Spliterator
	5. 更多方式...
		Random.ints()
		Pattern.splitAsStream()...	
4. 中间操作API{intermediate}
	操作结果是一个stream,中间操作可以有一个或者多个连续的中间操作，需要注意的是，中间操作值记录操作方式，不做具体执行，知道结束操作发生时，才做数据的最终执行。
	中间操作：就是业务逻辑处理。
	中间操作过程： 无状态：数据处理是，不受前置中间操作的影响。
					map/filter/peek/parallel/sequential/unorderd
				  有状态：数据处理时，受到前置中间操作的影响。
				  	distinct/sorted/limit/skip
5. 终结操作：结束操作{Terminal}
	需要注意：一个Stream对象，只能有一个Terminal操作，这个操作一旦发生，就会真实处理数据，生成对应的处理结果，此过程是不可逆的
	终结操作
		非短路操作：当前Stream对象必须处理完集合中所有数据，才能得到处理结果
			forEach/forEachOrdered/toArray/reduce/collect/min/max/count/iterator
		短路操作：当前的Stream对象在处理过程中，一旦满足某个条件，就可以得到结果
			anyMatch/allMatch/noneMatch/findFirst/findAny等等
			使用场景：在一个无限大的Stream -> 有限大的Stream
6. 结合、数组等批量数据API
	1.批量数据 -> stream对象
		1.1 多个数据集转stream：Stream stream = Stream.of("admin", "tom");
		1.2 数组转stream：
			String[] strs = new String[] {"admin","tom"};
			Stream stream = Arrays.stream(strs);
		1.3 列表转stream:ArrayList、HashSet
			List<String> strs = new ArrayList<>();
			Stream stream = strs.stream();
		1.4 Map转stream
			Map<String, Object> map = new HashMap<>();
			Stream stream = map.entrySet().stream();
		1.5 stream 对象对于基本数据类型的功能封装，例如：int/long/double
			IntStream.of(new int[] {10,20,30}).forEach(System.out::println);
			IntStream.rang(1,5).forEach(System.out::println);
			IntStream.rangClosed(1,5).forEach(System.out::println);
	2.Stream对象 -> 具体的类型
		1.1 转数组
			Object[] objs = stream.toArray(String[]::new);
		1.2 转字符串
			String str = stream.collect(collectors.joing()).toString();
		1.3 转列表
			List<String> list = stream.collect(Collectors.toList());
		1.4 转set
			Set<String> set = stream.collect(Collectors.toSet());
		1.5 转map
			Map<String, String> map = stream.collection(Collectors.toMap(x -> x, y -> "value:" + y));

	3. stream中常见的api操作
		1.1 map 中间操作：接受一个Function接口
			list = list.stream.map(name -> "改变：" + name).collect(Collectors.toList());
		1.2 filter 中间操作：过滤集合中的元数，剩下满足条件的元数
			list = list.stream.filter(name -> name.length > 5).collect(Collectors.toList());
		1.3 forEach 终结操作： 增强型循环（避免对同一个集合多次迭代，会影响效率）
			list.stream.forEach(System.out::println);
		1.4 peek() 中间操作，迭代数据完成数据的依次处理过程
			list.stream
				.peek(x -> System.out.println("peek1: " + x))
				.peek(x -> System.out.println("peek2: " + x))
				.forEach(System.out::println);
		1.5 skip 中间操作，有状态，跳过部分数据
			list.stream.skip(3);
		1.6 limit 中间操作，有状态，限制输出数据量
			list.stream.skip(3).limit(2);
		1.7 distict 中间操作，有状态，剔除重复的数据
			list.stream.distinct();
		1.8 sorted 中间操作，有状态
		1.9 max 中间操作，有状态
			Optional optional = list.stream.max((x,y) -> x - y);
		2.0 min 中间操作，有状态
		2.1 reduce 合并处理数据
			Optional optional = list.stream.reduce((sum,x) -> sum + x);

7. Lambad表达式的处理性能
	前提是处理大数据量：
		1.简单数据（Integer\Long）的迭代处理，使用外部迭代：for循环，增强型for循环,iterrator迭代器（性能最高）
		2.复杂数据（对象）的迭代处理，使用parallelStream（代码简介,并且在多核cpu的情况下，更能体现优势）、增强型for循环、iterator迭代器（性能最高）
	少量数据：
		我们可以按照自己的需求，使用代码简介的Stream
8. Lambda的线程安全问题
	1. 串行Stream，可以操作ArrayList等，线程不安全的数据源。
	2. 并行Stream, 因为底层是多线程拆分、合并数据，因此用foreEach的操作ArrayList等线程不安全的数据源，就会出现线程安全的问题，所以避免使用并行Stream去操作另外的一个非线程安全的集合的数据的存入的操作。值得高兴时，Stream提供一个方案，当去操作一个非线程安全的集合时，使用collect的终端操作，会避免线程安全的问题；当然你可以使用forEach去操作线程安全的集合或者，使用线程锁来解决线程安全的问题，但是线程锁，有可能出现线程抢占的问题，从而失去效率的优势

	
