一、缓存的雪崩：在同一时间的热点数据全部失效，导致大量请求访问数据
	原因分析：1. 热点数据的失效时间同时到期；
				方案：随机设置热点数据失效时间。
			 2. redis中间件宕机了；
			 	方案：1. 设置多级缓存，即设置多个备份，例如：设置一主、一备，则为2级缓存；
			 		 2. 搭建切片集群，让数据分散式分布存储。

二、缓存的击穿：缓存击穿是指热点key在某个时间点过期的时候，而恰好在这个时间点对这个Key有大量的并发请求过来，从而大量的请求打到db。
	因为系统中一般不会有这样的数据，如果有，则可以设置该数据永不过期

三、缓存的穿透：非法的数据穿过redis，直接访问数据库
	解决方案是，要根据具体情况具体分析
	解决方案：1. 将查询数据存入redis中，避免二次穿透，但是这样的数据不能过多，会暂用大量内存；
	 		 2. 布隆过滤器，过滤掉大部分非法请求；
	 		 3. 互斥的分布式锁：可以在redis与数据之间，添加分布式锁，让多个非法请求，在同一时间只能有一个请求到db，并且将查询的数据放入到redis，这样其他的请求就会集中redis
	 		 	分布式锁的：在同一jvm中，我们可以用synizorizde等方法来处理线程安全问题，但是在不同的jvm中我们就应该用分布式锁来解决线程安全问题

四、redis集群中的hash一致性算法原理及作用
	问题引入：怎么让数据均匀分布到redis节点；假设有2台服务器

	解决方案1： hash(key) % 2 == 0？ R1 : R2

	弊端：当集群的redis服务器变化时，需要全部的数据重新分配，代价太大。

	解决方案2：hash一致性算法，为了解决全部数据重新分配的问题
	方案思路：让服务器的问题，也是通过hash算法来确定位置，数据的key通过hash算法来逆时针寻找redis位置

	实现步骤：1. 设置一个环形物理存储位置，共有2^23个物理存储点；
			 2. redis服务器通过hash(ip + 编号) % 2^23 来确定存储位置；
			 3. 数据通过hash(key) % 2^23 确定位置后，顺时针寻找离自己位置最近的redis服务器存储；
			 4. 如果增服务器，只需要将相邻2台redis服务器之间的数据重新分配即可。

	问题引入：这样存储会产生数据存储倾斜问题；
	解决思路：让数据产生多个副本，这样存储点越多，就会减少数据存储倾斜的问题。以经验可得，一般存储点为1000-2000个，因此如果集群中为10台redis服务器，则每台服务器需要设置100-200的分取，并且一般redis服务器一般占用宿主机的内存，最好不要超过 75%。
