kafka 原理浅谈
1.术语
	1.1 producer:消息的生成者，负责消息的推送，消息的存储位置
	2.2 broker:负责消息的存储和读取
	2.3 consumer:消息消费者，负责消息的读取
	2.4 topic: 话题，对消费的分类，可以消息队列（queue）
	2.5 partition: 消息的分区，是topic具体分区，是电脑磁盘的文件夹
	2.6 zookeeper：元数据管理中心
	
2.producer消息存储
	0.8版本以后，producer会自己存储broker元素据，是通过连接broker来获取broker元素据：包括broker对应那个topic下的那个partition,每个topic下有几个分区等等，
	默认：producer会根据数据中key的hashCode值和话题分取取模，放到对应的partition中
	自定义：可以通过指定partitioner.class，来自定义存储规则，自定义类必须要实现Partitioner接口中的partition方法来实现自定义存储规则
	key=null时

3.consumer消息消费
	1. 在onsumer启动时，consumer发送ConsumerMetadataRequest给任意一个brokers,该broker回去问learder 		      congroller,谁最闲，然后将其选举为coordinate，并在ConsumerMetadataResponse中，会将consumer group所属的coordinate(协调员)的位置信息返回
	2. coordinate会从zookeeper读取消费组的成员信息，在没有完全加载完之前，consumer与coordinate所有请求都会返回错误编码
	3. coordinate会根据consumer注册到zookeeper顺序选举出consumer leader,然后由leader来完成本组内的任务分配即每个消费者对应消费partition，回传给coordinate
	4. 获取coordinate信息后，consumer连接coordinate节点，连接成功后做如下操作：
		3.1 consumer向coordinate发送HeartbeatRequest，如果是返回错误码，则说明coordinate处在初始化平衡
		3.2 如果发现coordinate在初始化平衡，consumer会向coordinate发送JoinGroupRequest,如果返回自己对应的topic-partition以及offset信息后，则开始读取消息
			如果返回错误码，则继续发送请求
	5. 如果设置consumer中消费指针offset是自动提交的话，那么在消息阅读完，就会向coordinate发送OffsetCommitRequest，并将offset + 1
	6. 消费者业务逻辑处理
	
4. broker选举机制 (broker controller leader)
	1. 选举learder: kafka集群中会有多个broker,当broker启动中，每个broker都会创建kafkaController,而每个broker上的kafkaController都会去zookeeper注册，谁先注册成功，改kafkaController
	就被选举为learder
	2. leader作用：
		1. 每个topic下的partition都会有负责读写的broker,这个broker被称为改partition的learder,同时，每个partition都会有副本，而每个副本都会存在不同的broker上。
		controller leader 就负责每个partition的leader选举，以及副本的选举。同时也会将信息同步给每个broker，为客户端提供实时的元数据
		2. 当follwer挂掉之后，他会找到对应的partition中的副本存储的位置，按照顺序选出新的lerder
		3. partiton副本的选举
		4. controller leader 挂掉，借助zookeeper重新选举controller learder
	
	

5.消费者rebalance(在平衡或者负载均衡)

6.kafka消息漏读与重复消费

7.kafka消息发送保证机制
	Kafka producer有三种ack机制  初始化producer时在config中进行配置
	1. ack=0  意味着producer不等待broker(learder)同步完成的确认,就发送下一条message
	2. ack=1  意味着producer要等待leader成功收到数据并得到确认，才发送下一条message
	3. ack=-1(all) 意味着producer得到learder、follwer确认，才发送下一条数据
	

	


